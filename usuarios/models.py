
from django.db import models
from django.contrib.auth.models import AbstractUser

# Create your models here.


class Users(AbstractUser):
    choices_cargo = (
                    ('P', 'Professor'),
                    ('E', 'Encarregado')
                )
    cargo = models.CharField(max_length=1, choices=choices_cargo, verbose_name="Tipo de Conta")
    
    def __str__(self):
        return f"{self.username} ({self.get_cargo_display()})"


# üìö Tabela para Professores
class Professor(models.Model):
    user = models.OneToOneField(Users, on_delete=models.CASCADE, related_name="professor")
    disciplina = models.CharField(max_length=100, verbose_name="Disciplina")
    formacao = models.CharField(max_length=200, blank=True, null=True, verbose_name="√Årea Acad√™mica")
    experiencia = models.TextField(blank=True, null=True, verbose_name="Experi√™ncia Profissional")
    data_contratacao = models.DateField(blank=True, null=True, verbose_name="Data de Contrata√ß√£o")
    telefone = models.CharField(max_length=15, blank=True, null=True, verbose_name="Telefone")
    endereco = models.TextField(blank=True, null=True, verbose_name="Endere√ßo")
    data_nascimento = models.DateField(blank=True, null=True, verbose_name="Data de Nascimento")

    def __str__(self):
        return f"{self.user.first_name} {self.user.last_name} - {self.disciplina}"

# üè´ Tabela de Turmas
class Turma(models.Model):
    ANO_LETIVO_CHOICES = [(str(ano), str(ano)) for ano in range(2000, 2051)]
    SERIE_CHOICES = [
        ('7¬™ Classe', '7¬™ Classe'),
        ('8¬™ Classe', '8¬™ Classe'),
        ('9¬™ Classe', '9¬™ Classe'),
        ('10¬™ Classe', '10¬∫ Classe'),
        ('11¬™ Classe', '11¬™ Classe'),
        ('12¬™ Classe', '12¬™ Classe'),
        ('13¬™ Classe', '13¬™ Classe'),
    ]
    PERIODO_CHOICES = [
        ('Manh√£', 'Manh√£'),
        ('Tarde', 'Tarde'),
        ('Noite', 'Noite'),
    ]
    CURSO_CHOICES = [
        ('Operador de inform√°tica', 'Operador de inform√°tica'),
        ('Auxiliar de contabilidade', 'Auxiliar de contabilidade'),
        ('T√©cnico de inform√°tica', 'T√©cnico de inform√°tica'),
        ('Inform√°tica de gest√£o', 'Inform√°tica de gest√£o'),
        ('Contabilidade de gest√£o', 'Contabilidade de gest√£o'),
        ('Fina√ßas', 'Fina√ßas'),
    ]
    nome = models.CharField(max_length=5, unique=True, verbose_name="Nome da turma")
    curso = models.CharField(max_length=30, choices=CURSO_CHOICES, verbose_name="Curso")
    ano_letivo = models.CharField(max_length=4, choices=ANO_LETIVO_CHOICES, verbose_name="Ano Letivo")
    serie = models.CharField(max_length=10, choices=SERIE_CHOICES, verbose_name="Classe")
    periodo = models.CharField(max_length=5, choices=PERIODO_CHOICES, verbose_name="Peri√≥do")
    professor = models.ManyToManyField(Professor, null=True, blank=True, related_name="turmas", verbose_name="Professor")

    def __str__(self):
        return f"Turma: {self.nome} - {self.serie} -  {self.curso} - {self.periodo} ({self.ano_letivo})"
    
    
# üéì Tabela para Alunos (agora vinculados √† turma)
class Aluno(models.Model):
    nome = models.CharField(max_length=50, verbose_name='Nome')
    sobrenome = models.CharField(max_length=50, verbose_name='Sobrenome')
    numero_matricula = models.CharField(max_length=20, unique=True, verbose_name="N√∫mero de Matr√≠cula")
    turma = models.ForeignKey(Turma, on_delete=models.SET_NULL, null=True, blank=True, related_name="alunos", verbose_name="Turma")
    

    def __str__(self):
        return f"Aluno: {self.nome} {self.sobrenome} - {self.turma}"
    

# üìä Tabela de Notas
class Nota(models.Model):
    SEMESTRE_CHOICES = [
        ('1¬∫ Semestre', '1¬∫ Semestre'),
        ('2¬∫ Semestre', '2¬∫ Semestre'),
        ('3¬∫ Semestre', '3¬∫ Semestre')
    ]

    TIPO_PROVA_CHOICES = [
        ('Avalia√ß√£o', 'Avalia√ß√£o'),
        ('Prova do Professor', 'Prova do Professor'),
        ('Exame Final', 'Exame Final'),
        ('Recupera√ß√£o', 'Recupera√ß√£o')
    ]

    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE, related_name="notas")
    professor = models.ForeignKey(Professor, on_delete=models.SET_NULL, null=True, blank=True, related_name="notas_lancadas")
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, related_name="notas")
    disciplina = models.CharField(max_length=100, verbose_name="Disciplina")
    semestre = models.CharField(max_length=15, choices=SEMESTRE_CHOICES, verbose_name="Semestre")
    tipo_prova = models.CharField(max_length=20, choices=TIPO_PROVA_CHOICES, verbose_name="Tipo de Prova")
    nota = models.DecimalField(max_digits=5, decimal_places=1, verbose_name="Nota")
    data_lancamento = models.DateField(auto_now_add=True, verbose_name="Data de Lan√ßamento")

    def __str__(self):
        return f"Nota: {self.aluno.nome} {self.aluno.sobrenome} - {self.disciplina} - {self.semestre} - {self.tipo_prova}: {self.nota} - {self.data_lancamento.strftime('%d/%m/%Y')}"


# üë®‚Äçüë©‚Äçüë¶ Tabela para Encarregados
class Encarregado(models.Model):
    relacao_choices = [('Pai', 'Pai'), ('M√£e', 'M√£e'), ('Outro', 'Outro')]
    user = models.OneToOneField(Users, on_delete=models.CASCADE, related_name="encarregado")
    filho = models.ForeignKey(Aluno, on_delete=models.SET_NULL, null=True, blank=True, related_name="encarregado", verbose_name="Filhos")
    relacionamento_com_aluno = models.CharField(max_length=50, choices=relacao_choices, verbose_name="Rela√ß√£o com o Aluno")

    def __str__(self):
        return f"Encarregado: {self.user.first_name} {self.user.last_name} ({self.relacionamento_com_aluno})"
    

# üìÑ Tabela de Presen√ßa
class Frequencia(models.Model):
    aluno = models.ForeignKey(Aluno, on_delete=models.CASCADE, related_name="frequencias")
    professor = models.ForeignKey(Professor, on_delete=models.SET_NULL, null=True, blank=True, related_name="frequencias_registradas")
    turma = models.ForeignKey(Turma, on_delete=models.CASCADE, related_name="frequencias")
    data = models.DateField(auto_now_add=True, verbose_name="Data da Aula")
    presente = models.BooleanField(default=True, verbose_name="Presente?")

    def __str__(self):
        return f"Frequ√™ncia: {self.aluno.user.first_name} {self.aluno.user.last_name} - {self.data} - {'Presente' if self.presente else 'Faltou'}"


# üì¨ Tabela de Comunica√ß√£o
class Comunicacao(models.Model):
    destinatario = models.ForeignKey(Users, on_delete=models.CASCADE, related_name="mensagens_recebidas")
    remetente = models.ForeignKey(Users, on_delete=models.CASCADE, related_name="mensagens_enviadas")
    assunto = models.CharField(max_length=200, verbose_name="Assunto")
    mensagem = models.TextField(verbose_name="Mensagem")
    data_envio = models.DateTimeField(auto_now_add=True, verbose_name="Data de Envio")

    def __str__(self):
        return f"Mensagem de {self.remetente.first_name} {self.remetente.last_name} para {self.destinatario.first_name} {self.destinatario.last_name}"

# üìÖ Tabela de Eventos e Calend√°rio Escolar
class Evento(models.Model):
    titulo = models.CharField(max_length=200, verbose_name="T√≠tulo")
    descricao = models.TextField(verbose_name="Descri√ß√£o")
    data_inicio = models.DateTimeField(verbose_name="Data de In√≠cio")
    data_fim = models.DateTimeField(blank=True, null=True, verbose_name="Data de Fim")
    publico_alvo = models.CharField(max_length=50, choices=[('Todos', 'Todos'), ('Professores', 'Professores'), ('Alunos', 'Alunos'), ('Encarregados', 'Encarregados')], verbose_name="P√∫blico Alvo")

    def __str__(self):
        return f"Evento: {self.titulo} - {self.data_inicio.strftime('%d/%m/%Y')}"
